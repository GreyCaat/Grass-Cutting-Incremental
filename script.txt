getgenv().ToggleAntiAfk = false

-----------------------------------------------------------------------------------------------------------------------
--AntiAfk
local VU = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
    if ToggleAntiAfk == true then
        VU:CaptureController()
        VU:ClickButton2(Vector2.new())
    end
end)

-----------------------------------------------------------------------------------------------------------------------
--Ui Lib

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GreyCaat/GC-Library/main/Lib.txt", true))()


local main = library:CreateMain("Grass Cutting Incremental", "also me hello")


local AutoStuff = main:CreateTab("Auto-Stuff")

local misc = main:CreateTab("Misc.")


local GrassLoop;
local FarmGrass = AutoStuff:CreateToggle("Collect Grass", function(state)
    if state then
        local Player = game.Players.LocalPlayer.Character
        GrassLoop = game:GetService("RunService").RenderStepped:Connect(function()
            for i, v in pairs(game:GetService("Workspace").GrassObjects:GetChildren()) do
                if v.Transparency ~= 1 then
                    Player.HumanoidRootPart.CFrame = v.CFrame
                end
            end
        end)
    elseif not state then
        if GrassLoop then
            GrassLoop:Disconnect()
        end
    end
end)


local PrestigeState = false
local AutoPrestige = AutoStuff:CreateToggle("Auto Prestige", function(state)
    if state then
        PrestigeState = true
        while PrestigeState == true do
            wait(1)
            local modscript = require(game:GetService("ReplicatedStorage").Resets)
            modscript.Prestige()
        end
    elseif not state then
        PrestigeState = false
    end
end)


local CrystallizeState = false
local AutoCrystallize = AutoStuff:CreateToggle("Auto Crystallize", function(state)
    if state then
        CrystallizeState = true
        while CrystallizeState == true do
            wait(1)
            local modscript = require(game:GetService("ReplicatedStorage").Resets)
            modscript.Crystallize()
        end
    elseif not state then
        CrystallizeState = false
    end
end)


local UpgradeLoop;
local MaxUpgrades = misc:CreateToggle("Max Upgrades (loop)", function(state)
    if state then
        UpgradeLoop = game:GetService("RunService").RenderStepped:Connect(function()
            local Player = game.Players.LocalPlayer
            for i, v in pairs(Player.PlayerGui:GetDescendants()) do
                if v.Name == "BasicUpgrade" then
                    v.Variables.CostScaling.Value = 0
                    v.Variables.BaseCost.Value = 0.1
                    v.Variables.Level.Value = v.Variables.LevelCap.Value
                end
            end
        end)
    elseif not state then
        if UpgradeLoop then
            UpgradeLoop:Disconnect()
        end
    end
end)


local AntiAfk = misc:CreateToggle("Anti Afk", function(state)
    if state then
        ToggleAntiAfk = true
    elseif not state then
        ToggleAntiAfk = false
    end
end)